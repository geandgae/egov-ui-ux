@charset "utf-8";

// ex
// @mixin mixin-ex () {
//   @content;
// }
// .ex{
//   @include mixin-ex() {
//     // @content; 속성 삽입
//     background:#f0f0f0;
//   };
// }

// background-image
$path-images : "../images/";
@mixin back-img($file, $size: contain, $path : $path-images) {
  background-image: url("#{$path-images}#{$file}");
  background-size: $size;
}
// alt
// @mixin background($url, $x, $y, $width, $height) {
//   background-image: url($url);
//   background-position: ($x) ($y);
//   background-size: $width $height;
// }

// size
@mixin size($w, $h: $w) {
  width: $w;
  height: $h;
}

// image replacement
@mixin ir($width: 0) {
  border: $width;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
}

// ellipsis
@mixin ellipsis($line: 1) {
  @if ($line == 1) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $line;
  }
}
// @mixin ellipsis($line: 1) {
//   display: -webkit-box;
//   overflow: hidden;
//   text-overflow: ellipsis;
//   -webkit-box-orient: vertical;
//   -webkit-line-clamp: $line;
// }

// radius
@mixin radius($r, $important: false) {
  @if (map-has-key($rounded, $r)) {
    border-radius: map-get($rounded, $r) #{if($important, "!important", "")};
  } @else {
    border-radius: $r #{if($important, "!important", "")};
  }
}

// transition
@mixin transition(
  $duration: 250ms,
  $property: all,
  $easing: cubic-bezier(0.4, 0, 0.2, 1), 
  $delay: 0,
  $transform: false
) {
  transition-property: $property;
  transition-duration: $duration ;
  transition-timing-function: $easing;
  transition-delay: $delay;
  @if $transform {
    transform: $transform;
  }
}
// keyframes
@mixin keyframes($name) {
  @keyframes #{$name} {
    @content;
  }
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
}
// animation
@mixin animation(
  $name, 
  $duration, 
  $timing-function: ease, 
  $delay: 0s, 
  $iteration-count: 1, 
  $direction: normal, 
  $fill-mode: both, 
  $play-state: running
) {
  animation-name: $name;
  animation-duration: $duration;
  animation-timing-function: $timing-function;
  animation-delay: $delay;
  animation-iteration-count: $iteration-count;
  animation-direction: $direction;
  animation-fill-mode: $fill-mode;
  animation-play-state: $play-state;
}

// position
@mixin position($position: absolute, $top: null, $right: null, $bottom: null, $left: null, $important: false) {
  position: $position #{if($important, "!important", "")};
  @if ($top) { 
    top: $top #{if($important, "!important", "")};
  }
  @if ($right) { 
    right: $right #{if($important, "!important", "")};
  }
  @if ($bottom) { 
    bottom: $bottom #{if($important, "!important", "")};
  }
  @if ($left) { 
    left: $left #{if($important, "!important", "")};
  }
}
//position-center
@mixin position-center($type: xy, $important: null, $position: absolute,) {
  position: $position $important;
  @if ($type == "x") {
    left: 50% $important;
    transform: translateX(-50%) $important;
  }
  @else if ($type == "y") {
    top: 50% $important;
    transform: translateY(-50%) $important;
  }
  @else if ($type == "xy") {
    left: 50% $important;
    top: 50% $important;
    transform: translateX(-50%) translateY(-50%) $important;
  }
}


@mixin display(
  $display: flex,
  $align: stretch,
  $justify: flex-start,
  $direction: row,
  $wrap: nowrap
) {
  @if ($display == "flex") {
    display: $display;
    align-items: $align;
    justify-content: $justify;
    flex-direction: $direction;
    flex-wrap: $wrap;
    // align-content:;
  } @else if($display == "vsb") {
    display: block;
    content: "";
  } @else if($display == "vsib") {
    display: inline-block;
    content: "";
  }
}





// 스크롤바 삭제
@mixin scroll-hide {
  &::-webkit-scrollbar {
    display: none;
  }
}





















//focus color
@mixin focus($offset: -.4rem, $color: #246BEB, $alpha: .8) {
	//border-radius: inherit;
	// outline-offset: $offset;
	// $transparent: 1 - $alpha;
	// $focus-color: transparentize($color, $transparent);
	// outline: 2px solid $focus-color;
}





//group contents
@mixin group-wrap() {
	display: flex;
	flex-wrap: wrap;
	align-items: stretch;
	position: relative;
	width: 100%;
}
@mixin group() {
	flex: 1 1 auto;
	position: relative;
	width: 1%;
	min-width: 0;
}

// /* One value, unitless number: flex-grow */
// flex: 2;

// /* One value, length or percentage: flex-basis */
// flex: 10em;
// flex: 30%;

// /* Two values: flex-grow | flex-basis */
// flex: 1 30px;

// /* Two values: flex-grow | flex-shrink */
// flex: 2 2;

// /* Three values: flex-grow | flex-shrink | flex-basis */
// flex: 2 2 10%;






// make-arrow
@mixin make-arrow($w: 0.12rem, $pl: 0, $pt: $pl, $line: 1px, $color: #959595, $deg: -45) {
  position: relative;
  &::after {
    position: absolute;
    top: $pt;
    left: $pl;
    content: "";
    @include size($w, $h: $w);
    border-top: $line solid $color;
    border-left: $line solid $color;
    transform: rotate($deg + deg);
  }
}

// make-x
@mixin make-x($w: 0.26rem, $line: 1px, $color: #717171) {
  position: relative;
  @include size($w, $h: $w);
  &::before,
  &::after {
    display: block;
    content: "";
    position: absolute;
    left: $w / 2;
    height: 100%;
    width: $line;
    background-color: $color;
  }
  &::before {
    transform: rotate(45deg);
  }
  &::after {
    transform: rotate(-45deg);
  }
}

// 라디오,체크박스 리셋
@mixin check-reset {
  display: block;
  input[type="checkbox"],
  input[type="radio"] {
    display: none;
  }
  input + label {
    background: none;
    line-height: normal;
    min-height: unset;
    width: auto !important;
    padding: 0;
    @include display($align: center);
  }
  input:checked + label {
    background: none;
  }
}

// 미디어 쿼리 
$devices: (
  mobile: 320px,
  tablet: 768px,
  desktop: 1280px
);
  
@mixin mq($device) {
  @if map-has-key($devices, $device) {
    $device-width: map-get($devices, $device);
    @media screen and (min-width: #{$device-width}) {
      @content;
    }
  } @else {
    @warn "Invalid breakpoint: #{$device}.";
  }
}

// @mixin@  mediaQuery 디바이스별 적용 @mixin@
@mixin mobile {
  @media screen and (max-width: 768px) {
    @content;
  }
}
@mixin tablet {
  @media screen and (min-width: 768px) and (max-width: 1024px) {
    @content;
  }
}
@mixin desktop {
  @media screen and (min-width: 1024px) {
    @content;
  }
}


$desktop-lg : 1920px;
$desktop-md : 1600px;

@mixin mq($point) {
    @if $point == pc-lg {
        @media screen and (min-width: #{$desktop-lg}) {
            @content;
        }
    }
    @else if $point == pc-md {
        @media screen and (min-width: #{$desktop-md}) {
            @content;
        }
    }
}









// @mixin@  margin padding 등 size별로 미리세팅 @mixin@
// 기본폰트 12px 로 진행 추가되는 폰트개수만큼 증감숫자를 넣어주면된다.
$font-base: 12;
@mixin fontSizeCreate($length: 0) {
  @for $i from 0 through $length {
    .font-#{$i + $font-base} {
      font-size: $font-base + $i + px;
    }
  }
}
// @include fontSizeCreate(50);

// @mixin@ width size 타입 @mixin@
$widthSize: 10;
@mixin widthType($length: 0) {
  @for $i from 0 through $length {
    .w-#{$i*$widthSize} {
      width: $widthSize * $i + px !important;
    }
  }
}
// @include widthType(50);

$heightSize: 10;
@mixin HeightType($length: 0) {
  @for $i from 0 through $length {
    .h-#{$i*$heightSize} {
      height: $heightSize * $i + px !important;
    }
  }
}
// @include HeightType(20);

@mixin styleNone($propStyle) {
  &:last-child {
    #{$propStyle}: none;
  }
}

// @mixin@  margin padding 등 size별로 미리세팅 @mixin@
$sizes: 0, 5, 10, 15, 20, 25, 30, 35, 40, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100;
@mixin space($value: "margin", $name: "all", $dir: "left", $dir2: "top", $multi: 1) {
  $valueName: "";
  @if $value == margin {
    $valueName: "m";
  } @else if $value == padding {
    $valueName: "p";
  }
  @each $size in $sizes {
    @if $name == all {
      .#{$valueName}-#{$size} {
        #{$value}: $size + px !important;
      }
    } @else {
      .#{$valueName}-#{$name}-#{$size} {
        #{$value}-#{$dir}: $size + px !important;
        @if $multi > 1 {
          #{$value}-#{$dir2}: $size + px !important;
        }
      }
    }
  }
}
// single
// @include space("margin", "t", "top", 1);
// @include space("margin", "b", "bottom", 1);
// @include space("margin", "l", "left", 1);
// @include space("margin", "r", "right", 1);
// @include space("padding", "t", "top", 1);
// @include space("padding", "b", "bottom", 1);
// @include space("padding", "l", "left", 1);
// @include space("padding", "r", "right", 1);
// // double
// @include space("margin", "tb", "top", "bottom", 2);
// @include space("margin", "lr", "left", "right", 2);
// @include space("padding", "tb", "top", "bottom", 2);
// @include space("padding", "lr", "left", "right", 2);
// //all
// @include space("margin");
// @include space("padding");

@mixin prefix($property, $value) {
  $prefixes: webkit, moz, ms, o;
  @each $prefix in $prefixes {
    #{"-" + $prefix + "-" + $property}: $value;
  }
  // 기본
  #{$property}: $value;
}


@mixin notoFont($weight: light, $color: #000) {
  @if $weight==bold {
    font-family: "NotoSansKR-Bold";
    color: $color;
  } @else if $weight==light {
    font-family: "NotoSansKR-Light";
    color: $color;
  } @else if $weight==medium {
    font-family: "NotoSansKR-Medium";
    color: $color;
  } @else if $weight==thin {
    font-family: "NotoSansKR-Thin";
    color: $color;
  } @else if $weight==regular {
    font-family: "NotoSansKR-Regular";
    color: $color;
  } @else if $weight==black {
    font-family: "NotoSansKR-Black";
    color: $color;
  } @else if $weight==demilight {
    font-family: "NotoSansKR-DemiLight";
    color: $color;
  }
}
@mixin jungFont($weight: 110, $color: #000) {
  @if $weight==110 {
    font-family: "jung-110";
    color: $color;
  } @else if $weight==120 {
    font-family: "jung-120";
    color: $color;
  } @else if $weight==130 {
    font-family: "jung-130";
    color: $color;
  } @else if $weight==140 {
    font-family: "jung-140";
    color: $color;
  } @else if $weight==150 {
    font-family: "jung-150";
    color: $color;
  } @else if $weight==160 {
    font-family: "jung-160";
    color: $color;
  } @else if $weight==170 {
    font-family: "jung-170";
    color: $color;
  }
}
@mixin robotoFont($weight: regular, $color: #000) {
  @if $weight==bold {
    font-family: "Roboto-Bold";
    color: $color;
  } @else if $weight==italic {
    font-family: "Roboto-Italic";
    color: $color;
  } @else if $weight==light {
    font-family: "Roboto-Light";
    color: $color;
  } @else if $weight==medium {
    font-family: "Roboto-Medium";
    color: $color;
  } @else if $weight==regular {
    font-family: "Roboto-Regular";
    color: $color;
  } @else if $weight==thin {
    font-family: "Roboto-Thin";
    color: $color;
  }
}


// bg_name : 이미지.jpg 또는 .png ,$btnPositionX : 백그라운드 가로 포지션 , $btnPositionY : 백그라운드 세로 포지션
// $bgColor : null - > 기본 배경색 없음, 필요 시 입력 . 예) #fff
@mixin babyBackground($bg_name, $btnPositionX: 0, $btnPositionY: 0, $bgColor: null) {
  background: url("http://cdn.boribori.co.kr/Images_Web/2021/20211213_br_SookSookDay39451/" + $bg_name) $bgColor;
  background-position: $btnPositionX $btnPositionY;
  background-repeat: no-repeat;
}


// @mixin mobile {
// 	@media (max-width: $breakpoint-sm - 1px) {
// 		@content;
// 	}
// }
// @mixin mobileMore {
// 	@media (min-width: $breakpoint-sm) {
// 		@content;
// 	}
// }

// @mixin tablet {
// 	@media (min-width: $breakpoint-sm) and (max-width: $breakpoint-md - 1px) {
// 		@content;
// 	}
// }

// //tablet size 이하
// @mixin tabletLess { //
// 	@media (max-width: $breakpoint-md - 1px) {
// 		@content;
// 	}
// }

// //tablet size 이상
// @mixin tabletMore { //
// 	@media (min-width: $breakpoint-md) {
// 		@content;
// 	}
// }

// @mixin desktop {
// 	@media (min-width: $breakpoint-lg) {
// 		@content;
// 	}
// }